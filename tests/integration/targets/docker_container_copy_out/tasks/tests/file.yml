---
# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

- name: Registering container name
  set_fact:
    cname: "{{ cname_prefix ~ '-f' }}"
- name: Registering container name
  set_fact:
    cnames: "{{ cnames + [cname] }}"

# Create container

- name: Create container
  docker_container:
    image: "{{ docker_test_image_alpine }}"
    command:
      - /bin/sh
      - "-c"
      - >-
        mkdir -p /test/container/path;
        echo -n "Content 1" > /test/container/path/file_1;
        echo -n "Content 2" > /test/container/path/file_2;
        echo -n "Content 3" > /test/container/path/file_3;
        mkdir -p /test/container/path/testdir;
        echo -n "Content 4" > /test/container/path/testdir/file_4;
        mkdir -p /test/container/path/testdir/nested;
        echo -n "Content 5" > /test/container/path/testdir/nested/file_5;
        ln -nfs /test/container/path/testdir /test/container/path/lndir;
        ln -nfs /test/container/path/file_1 /test/container/path/lnfile;
        ln -nfs /test/container/path/lndir /test/container/path/lndir2;
        ln -nfs /test/container/path/lndir/file_4 /test/container/path/lnfile2;
        sleep 10m;
    name: "{{ cname }}"
    state: started

# Create files

# Do not create file 1

# # Create file 2 with different content
# - name: Create file 2
#   copy:
#     dest: "{{ remote_tmp_dir }}/file_2"
#     content: Not Content 2
#     mode: 0644
#   register: create_2

# # Create file 3 with same content
# - name: Create file 3
#   copy:
#     dest: "{{ remote_tmp_dir }}/file_3"
#     content: Content 3
#     mode: 0644
#   register: create_3

# # Create a directory
# - name: Create directory
#   file:
#     dest: "{{ remote_tmp_dir }}/testdir"
#     state: directory

# # Create a nested directory
# - name: Create nested directory
#   file:
#     dest: "{{ remote_tmp_dir }}/testdir/nested"
#     state: directory

# # Create a different directory
# - name: Create different directory
#   file:
#     dest: "{{ remote_tmp_dir }}/testdir2"
#     state: directory

# # Create a file in a directory
# - name: Create file in directory
#   copy:
#     dest: "{{ remote_tmp_dir }}/testdir2/file_4"
#     content: Content 4
#     mode: 0644

# # Create a symlink to a directory
# - name: Create symlink to directory
#   file:
#     src: "{{ remote_tmp_dir }}/testdir"
#     dest: "{{ remote_tmp_dir }}/lndir"
#     state: link

# # Create a symlink to a file
# - name: Create symlink to file
#   file:
#     src: "{{ remote_tmp_dir }}/file_2"
#     dest: "{{ remote_tmp_dir }}/lnfile"
#     state: link

# # Create a broken symlink
# - name: Create broken symlink
#   file:
#     src: "{{ remote_tmp_dir }}/nonexistent"
#     dest: "{{ remote_tmp_dir }}/broken"
#     state: link
#     force: True

# # Create a symlink to a symlink
# - name: Create symlink to symlink
#   file:
#     src: "{{ remote_tmp_dir }}/lndir"
#     dest: "{{ remote_tmp_dir }}/lndir2"
#     state: link

# Create a symlink to a file in a symlinked directory
# - name: Create symlink to file in symlinked directory
#   file:
#     src: "{{ remote_tmp_dir }}/lndir/file_4"
#     dest: "{{ remote_tmp_dir }}/lnfile2"
#     state: link
#     follow: True

# Create a directory that is empty
- name: Create directory
  file:
    dest: "{{ remote_tmp_dir }}/testdir4"
    state: directory

################################################################################################
# Do tests

######################### Invalid params

- name: Test invalid mode
  docker_container_copy_out:
    container: "{{ cname }}"
    container_path: /test/container/path/file_1
    path: "{{ remote_tmp_dir }}/file_1"
    mode: 1234123412341431241
  register: result_invalid_mode
  ignore_errors: true

- name: Check results
  assert:
    that:
      - result_invalid_mode is failed
      - result_invalid_mode.msg == "\"1234123412341431241\" is not a valid mode"

######################### Copy

# - name: Copy file 1
#   docker_container_copy_out:
#     container: "{{ cname }}"
#     container_path: /test/container/path/file_1
#     path: "{{ remote_tmp_dir }}/file_1"
#   register: result_1

# - name: Copy file 2
#   docker_container_copy_out:
#     container: "{{ cname }}"
#     container_path: /test/container/path/file_2
#     path: "{{ remote_tmp_dir }}/file_2"
#   register: result_2

# - name: Copy file 3
#   docker_container_copy_out:
#     container: "{{ cname }}"
#     container_path: /test/container/path/file_3
#     path: "{{ remote_tmp_dir }}/file_3"
#   register: result_3

# - name: Copy directory with nesting to a directory with nesting that already exists
#   docker_container_copy_out:
#     container: "{{ cname }}"
#     container_path: /test/container/path/testdir
#     path: "{{ remote_tmp_dir }}/testdir"
#   register: result_dir_nesting_exists

# - name: Copy directory that only contains a file to a directory that already exists and only contains a file
#   docker_container_copy_out:
#     container: "{{ cname }}"
#     container_path: /test/container/path/testdir/nested
#     path: "{{ remote_tmp_dir }}/testdir/nested"
#   register: result_dir_only_file_exists

# - name: Copy directory with nesting to a directory that already exists and only contains a file
#   docker_container_copy_out:
#     container: "{{ cname }}"
#     container_path: /test/container/path/testdir
#     path: "{{ remote_tmp_dir }}/testdir2"
#   register: result_dir_nesting_file_exists_but_different


- name: Copy directory with nesting to a directory that does not exist
  docker_container_copy_out:
    container: "{{ cname }}"
    container_path: /test/container/path/testdir
    path: "{{ remote_tmp_dir }}/testdir3"
    force: True
    archive_mode: True
    group_id: 1001
    mode: '0775'
  become: True # https://stackoverflow.com/a/7245654
  register: result_dir_nesting_does_not_exist

- name: Copy directory with nesting to a directory that does exist but is empty
  docker_container_copy_out:
    container: "{{ cname }}"
    container_path: /test/container/path/testdir
    path: "{{ remote_tmp_dir }}/testdir4"
    force: True
    archive_mode: True
    group_id: 1001
    mode: '0775'
  become: True # https://stackoverflow.com/a/7245654
  register: result_dir_nesting_does_exist_empty


# - name: Copy symlink to directory
#   docker_container_copy_out:
#     container: "{{ cname }}"
#     container_path: /test/container/path/lndir
#     path: "{{ remote_tmp_dir }}/lndir"
#   register: result_lndir

# - name: Copy symlink to file
#   docker_container_copy_out:
#     container: "{{ cname }}"
#     container_path: /test/container/path/lnfile
#     path: "{{ remote_tmp_dir }}/lnfile"
#   register: result_lnfile

# - name: Copy symlink to symlink
#   docker_container_copy_out:
#     container: "{{ cname }}"
#     container_path: /test/container/path/lndir2
#     path: "{{ remote_tmp_dir }}/lndir2"
#   register: result_lndir2

# - name: Stat file 1
#   stat:
#     path: "{{ remote_tmp_dir }}/file_1"
#   register: stat_1

# - name: Stat file 2
#   stat:
#     path: "{{ remote_tmp_dir }}/file_2"
#   register: stat_2

# - name: Stat file 3
#   stat:
#     path: "{{ remote_tmp_dir }}/file_3"
#   register: stat_3

# - name: Stat directory
#   stat:
#     path: "{{ remote_tmp_dir }}/testdir"
#   register: stat_dir

# - name: Stat nested directory
#   stat:
#     path: "{{ remote_tmp_dir }}/testdir/nested"
#   register: stat_nested_dir

# - name: Stat symlink to directory
#   stat:
#     path: "{{ remote_tmp_dir }}/lndir"
#   register: stat_lndir

# - name: Stat symlink to file
#   stat:
#     path: "{{ remote_tmp_dir }}/lnfile"
#   register: stat_lnfile

# - name: Stat symlink to symlink
#   stat:
#     path: "{{ remote_tmp_dir }}/lndir2"
#   register: stat_lndir2

# The copy should MAKE this directory
- name: Stat directory that did not use to exist but does now
  stat:
    path: "{{ remote_tmp_dir }}/testdir3"
  register: stat_dir3

- name: Stat directory existed and was empty but now has files
  stat:
    path: "{{ remote_tmp_dir }}/testdir4"
  register: stat_dir4


- name: Check results
  assert:
    that:
      # - result_1 is success
      # - result_2 is success
      # - result_3 is success
      # - stat_1.stat.exists
      # - stat_2.stat.exists
      # - stat_3.stat.exists
      # - stat_1.stat.size == 9
      # - stat_2.stat.size == 9
      # - stat_3.stat.size == 9
      # - create_2.checksum != stat_2.stat.checksum
      # - create_3.checksum == stat_3.stat.checksum
      # - result_dir_nesting_exists is success
      # - result_dir_only_file_exists is success
      # - result_lndir is success
      # - result_lnfile is success
      # - result_lndir2 is success
      # - stat_dir.stat.exists
      # - stat_nested_dir.stat.exists
      # - stat_lndir.stat.exists
      # - stat_lnfile.stat.exists
      # - stat_lndir2.stat.exists
      # - stat_dir.stat.islnk == false
      # - stat_nested_dir.stat.islnk == false
      # - stat_lndir.stat.islnk
      # - stat_lnfile.stat.islnk
      # - stat_lndir2.stat.islnk
      - stat_dir3.stat.exists
      - stat_dir3.stat.isdir
      - stat_dir4.stat.exists
      - stat_dir4.stat.isdir

################################################################################################
# Cleanup

- name: Remove container
  docker_container:
    name: "{{ cname }}"
    state: absent
    force_kill: true
